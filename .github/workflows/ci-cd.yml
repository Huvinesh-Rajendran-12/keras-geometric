name: Keras-Geometric CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # Trigger on version tags (e.g., v0.1.0, v0.1.0b1)
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

# Define environment variables for consistency
env:
  UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
  UV_GLOBAL_CACHE: "true"

jobs:
  # --- Filter Job ---
  filter:
    name: Check for Python file changes
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    outputs:
      python_changed: ${{ steps.filter.outputs.python == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Calculate changed paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - 'src/**/*.py'
              - 'tests/**/*.py'
              - 'pyproject.toml'
              - 'uv.lock'

  # --- Linting and Formatting Job ---
  lint:
    name: Lint and Format (Python 3.11)
    runs-on: ubuntu-latest
    needs: filter
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name != 'schedule' && needs.filter.outputs.python_changed == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.UV_CACHE_DIR }}
            ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-uv-lint-${{ hashFiles('**/uv.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-lint-
      - name: Create venv and Install Dependencies
        run: |
          uv venv .venv --seed
          source .venv/bin/activate
          uv pip install -e ".[dev]"
      - name: Run Ruff format check
        run: |
          source .venv/bin/activate
          uv run ruff format --check .
      - name: Run Ruff linting
        run: |
          source .venv/bin/activate
          uv run ruff check .
      - name: Run Pyrefly type checking
        run: |
          source .venv/bin/activate
          uv run pyrefly check

  # --- Security Scanning Job ---
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: filter
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name != 'schedule' && needs.filter.outputs.python_changed == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.UV_CACHE_DIR }}
            ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-uv-security-${{ hashFiles('**/uv.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-security-
      - name: Create venv and Install Dependencies
        run: |
          uv venv .venv --seed
          source .venv/bin/activate
          uv pip install -e ".[dev]"
      - name: Run pip-audit
        run: |
          source .venv/bin/activate
          uv run pip-audit
      - name: Run safety check
        run: |
          source .venv/bin/activate
          uv run safety check

  # --- Testing Job (Matrix) ---
  test:
    name: Test Py${{ matrix.python-version }}/${{ matrix.keras-backend }}
    needs: [lint, security, filter]
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name != 'schedule' && needs.filter.outputs.python_changed == 'true')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        keras-backend: [tensorflow, torch, jax]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.UV_CACHE_DIR }}
            ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.keras-backend }}-${{ hashFiles('**/uv.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.keras-backend }}-
      - name: Create venv and Install Dependencies
        run: |
          uv venv .venv --seed
          source .venv/bin/activate
          # Install backend-specific dependencies
          if [ "${{ matrix.keras-backend }}" = "torch" ]; then
            uv pip install torch>=2.0.0 torch-geometric>=2.5.0
          elif [ "${{ matrix.keras-backend }}" = "tensorflow" ]; then
            uv pip install tensorflow>=2.17
          elif [ "${{ matrix.keras-backend }}" = "jax" ]; then
            uv pip install "jax[cpu]"
          fi
          # Install keras and project
          uv pip install keras>=3.0
          uv pip install -e ".[test]"
      - name: Run tests
        env:
          KERAS_BACKEND: ${{ matrix.keras-backend }}
        run: |
          source .venv/bin/activate
          echo "Using Keras backend: $KERAS_BACKEND"
          python -c "import keras; print(f'Keras version: {keras.__version__}'); print(f'Backend: {keras.backend.backend()}')"
          echo "Running tests..."
          uv run python -m pytest tests/ -v

  # --- Build Job ---
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.UV_CACHE_DIR }}
            ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-uv-build-${{ hashFiles('**/uv.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-build-
      - name: Create venv and Install Build Dependencies
        run: |
          uv venv .venv --seed
          source .venv/bin/activate
          uv pip install build hatchling hatch-vcs editables
      - name: Build package
        run: |
          source .venv/bin/activate
          echo "Building package for tag: $GITHUB_REF_NAME"
          uv run python -m build
      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # --- Generate Release Notes Job ---
  generate_release_notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      release_notes: ${{ steps.generate_notes.outputs.release_notes }}
      tag_name: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Get Tag Name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Generate Release Notes Body
        id: generate_notes
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.tag.outputs.tag }}^ 2>/dev/null || echo "")
          echo "Previous tag: ${PREVIOUS_TAG:-'(none)'}"
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges ${{ steps.tag.outputs.tag }})
          else
            COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges $PREVIOUS_TAG..${{ steps.tag.outputs.tag }})
          fi
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "## Changes in ${{ steps.tag.outputs.tag }} ($(date +"%Y-%m-%d"))\n\n$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # --- Publish to PyPI Job ---
  publish_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, generate_release_notes]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha') && !contains(github.ref, 'rc')
    environment:
      name: pypi
      url: https://pypi.org/p/keras-geometric
    permissions:
      id-token: write # Required for trusted publishing
    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with: { name: python-package-distributions, path: dist/ }
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # --- Publish to TestPyPI Job (for pre-releases) ---
  publish_testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [build, generate_release_notes]
    if: startsWith(github.ref, 'refs/tags/v') && (contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc'))
    environment:
      name: testpypi
      url: https://test.pypi.org/p/keras-geometric
    permissions:
      id-token: write # Required for trusted publishing
    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with: { name: python-package-distributions, path: dist/ }
      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  # --- Create GitHub Release Job ---
  create_github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish_pypi, publish_testpypi, generate_release_notes]
    if: startsWith(github.ref, 'refs/tags/v') && (success() || failure()) && !cancelled()
    permissions:
      contents: write
    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with: { name: python-package-distributions, path: dist/ }
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.generate_release_notes.outputs.tag_name }}
          name: Release ${{ needs.generate_release_notes.outputs.tag_name }}
          body: ${{ needs.generate_release_notes.outputs.release_notes }}
          files: dist/*
          draft: false
          prerelease: contains(needs.generate_release_notes.outputs.tag_name, 'beta') || contains(needs.generate_release_notes.outputs.tag_name, 'alpha') || contains(needs.generate_release_notes.outputs.tag_name, 'rc')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
