# .github/workflows/ci-cd.yml
name: Keras-Geometric CI/CD

# Controls when the workflow will run
on:
  push:
    branches: [main]
    tags:
      - "v*" # Build/publish on tags
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  # --- Filter Job (Checks for Python file changes) ---
  filter:
    name: Check for Python file changes
    runs-on: ubuntu-latest
    # Only run this check for push/pull_request events, not tags
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    outputs:
      # Output 'true' if Python files changed, 'false' otherwise
      python_changed: ${{ steps.filter.outputs.python == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate changed paths
        uses: dorny/paths-filter@v3 # Use paths-filter action
        id: filter # Give the step an ID
        with:
          # Base branch for comparison on PRs/pushes
          base: ${{ github.ref }}
          # Define filter groups
          filters: |
            python: # Name of the filter group
              - 'src/**/*.py' # Check for .py files in src
              - 'tests/**/*.py' # Check for .py files in tests
              - 'pyproject.toml' # Also run if dependencies change
              - 'uv.lock' # Also run if lock file changes

  # --- Linting Job ---
  lint:
    name: Linting (Python 3.11)
    runs-on: ubuntu-latest
    # Depend on the filter job for push/PR events
    needs: filter
    # Run only if Python files changed (on push/PR) OR if manually dispatched/tagged
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v') ||
      (needs.filter.outputs.python_changed == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Create virtual environment
        run: uv venv .venv --seed

      - name: Install dependencies including project and lint tools
        run: source .venv/bin/activate && uv pip install -e ".[dev]"

      - name: Run flake8
        run: source .venv/bin/activate && uv run flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run mypy
        run: source .venv/bin/activate && uv run mypy src/

  # --- Testing Job (Matrix) ---
  test:
    name: Test Python ${{ matrix.python-version }} / ${{ matrix.keras-backend }}
    # Depend on filter job (for push/PR) and lint job
    needs: [lint, filter]
    # Run only if Python files changed (on push/PR) OR if manually dispatched/tagged
    # Also ensure lint job succeeded (implied by needs: lint unless always() is used)
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v') ||
      (needs.filter.outputs.python_changed == 'true')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        keras-backend: [tensorflow, torch, jax]
        include:
          - keras-backend: tensorflow
            backend-deps: '"tensorflow-macos>=2.17" "keras>=3.0"' # Use tensorflow if not macOS
          - keras-backend: torch
            backend-deps: '"torch" "torch-geometric" "torch-scatter" "keras>=3.0"'
          - keras-backend: jax
            backend-deps: '"jax[cpu]" "keras>=3.0"'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.keras-backend }}-${{ hashFiles('**/uv.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.keras-backend }}-

      - name: Create virtual environment
        run: uv venv .venv --seed

      - name: Install backend dependencies
        run: source .venv/bin/activate && uv pip install ${{ matrix.backend-deps }}

      - name: Install project + test dependencies
        run: source .venv/bin/activate && uv pip install -e ".[test]"

      - name: Run tests
        env:
          KERAS_BACKEND: ${{ matrix.keras-backend }}
        run: |
          source .venv/bin/activate
          echo "Using Keras backend: $KERAS_BACKEND"
          python -c "import keras; print(keras.backend.backend())" # Verify backend
          echo "Running tests..."
          uv run python -m unittest discover -s tests -v

  # --- Build Job ---
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test # Ensure tests pass on the tag before building
    # Run only on tags starting with v*
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code (fetch full history for hatch-vcs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for hatch-vcs to get tags

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-build-${{ hashFiles('**/uv.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-build-

      - name: Create virtual environment
        run: uv venv .venv --seed

      - name: Install build dependencies
        run: source .venv/bin/activate && uv pip install build hatch-vcs

      - name: Build package
        run: |
          source .venv/bin/activate
          echo "Building package for tag: $GITHUB_REF_NAME" # Use GITHUB_REF_NAME for tag
          uv run python -m build

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # --- Publish to TestPyPI Job ---
  publish_testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build # Run after build is complete
    # Run only on tags starting with v*
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/keras-geometric

    steps:
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-publish-${{ hashFiles('**/uv.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-publish-

      - name: Create virtual environment
        run: uv venv .venv --seed

      - name: Install Twine
        run: source .venv/bin/activate && uv pip install twine

      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Check artifacts
        run: ls -l dist/

      - name: Publish package to TestPyPI
        run: |
          source .venv/bin/activate
          uv run twine upload --repository testpypi --non-interactive -u __token__ -p ${{ secrets.TEST_PYPI_API_TOKEN }} dist/*
